name: Build APK (robust)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure gradle wrapper is executable
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "gradlew: present"
          else
            echo "gradlew: MISSING"
          fi

      - name: Install Android command line tools and SDK components (platform 34)
        run: |
          set -euo pipefail

          # canonical SDK install path for this runner
          SDKROOT="${RUNNER_TEMP}/android-sdk"
          mkdir -p "${SDKROOT}"

          cd "${RUNNER_TEMP}"
          ZIP="commandlinetools-linux.zip"
          curl -fsSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o "$ZIP"

          mkdir -p "${SDKROOT}/cmdline-tools/latest"
          unzip -q "$ZIP" -d "${SDKROOT}/cmdline-tools/latest"

          # handle nested folder layout produced by some tool versions
          if [ -d "${SDKROOT}/cmdline-tools/latest/cmdline-tools" ]; then
            mv "${SDKROOT}/cmdline-tools/latest/cmdline-tools/"* "${SDKROOT}/cmdline-tools/latest/" || true
            rmdir "${SDKROOT}/cmdline-tools/latest/cmdline-tools" || true
          fi

          SDKMANAGER_CMD="${SDKROOT}/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "${SDKMANAGER_CMD}"

          # export canonical SDK env for this step so sdkmanager uses same path
          export ANDROID_HOME="${SDKROOT}"
          export ANDROID_SDK_ROOT="${SDKROOT}"

          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" "platform-tools" "platforms;android-34" "build-tools;34.0.0" "cmdline-tools;latest" || true
          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" --licenses || true

          # persist a single canonical SDK location for subsequent workflow steps
          echo "ANDROID_HOME=${SDKROOT}" >> "${GITHUB_ENV}"
          echo "ANDROID_SDK_ROOT=${SDKROOT}" >> "${GITHUB_ENV}"

          # ensure build-tools and platform-tools are in PATH
          echo "${SDKROOT}/platform-tools" >> "${GITHUB_PATH}"
          echo "${SDKROOT}/build-tools/34.0.0" >> "${GITHUB_PATH}"

          echo "Android SDK components installed to ${SDKROOT}"

      - name: Print Java & Gradle versions (for logs)
        run: |
          java -version || true
          if [ -f ./gradlew ]; then ./gradlew --version || true; fi

      - name: Build APKs (debug + release)
        run: |
          set -euo pipefail
          if [ -f ./gradlew ]; then
            echo "Using gradlew wrapper"
            ./gradlew assembleDebug assembleRelease --stacktrace --no-daemon
          else
            echo "gradlew missing, installing Gradle 8.4 and trying system gradle"
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle 8.4
            gradle assembleDebug assembleRelease --stacktrace --no-daemon
          fi
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"

      - name: Show APK outputs
        run: |
          echo "Debug APK:"
          ls -la app/build/outputs/apk/debug || true
          echo "Release APK:"
          ls -la app/build/outputs/apk/release || true

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: twisted-apks
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk
