name: Build APK

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # default gradle command (fall back to ./gradlew)
      GRADLE_CMD: ./gradlew
      ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Ensure gradle wrapper is executable
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
          fi

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure Android SDK + build tools are installed (if necessary)
        shell: bash
        run: |
          set -euo pipefail
          SDKROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "${SDKROOT}"

          # Look for an existing sdkmanager first
          if command -v sdkmanager >/dev/null 2>&1; then
            echo "Using preinstalled sdkmanager from PATH"
            SDKMANAGER_CMD="$(command -v sdkmanager)"
          elif [ -x "${SDKROOT}/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER_CMD="${SDKROOT}/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "${SDKROOT}/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER_CMD="${SDKROOT}/cmdline-tools/bin/sdkmanager"
          else
            echo "No sdkmanager found â€” downloading Android commandline tools"
            cd "${RUNNER_TEMP:-/tmp}"
            ZIP="commandlinetools-linux.zip"
            # Download a reasonably recent command-line tools distribution
            curl -fsSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o "$ZIP"
            mkdir -p "${SDKROOT}/cmdline-tools/latest"
            unzip -q "$ZIP" -d "${SDKROOT}/cmdline-tools/latest"
            # The downloaded zip commonly contains a top-level 'cmdline-tools' folder;
            # move its contents into .../cmdline-tools/latest
            if [ -d "${SDKROOT}/cmdline-tools/latest/cmdline-tools" ]; then
              mv "${SDKROOT}/cmdline-tools/latest/cmdline-tools"/* "${SDKROOT}/cmdline-tools/latest/" || true
              rmdir "${SDKROOT}/cmdline-tools/latest/cmdline-tools" || true
            fi
            SDKMANAGER_CMD="${SDKROOT}/cmdline-tools/latest/bin/sdkmanager"
            chmod +x "${SDKMANAGER_CMD}"
          fi

          echo "sdkmanager => ${SDKMANAGER_CMD}"
          export PATH="${SDKROOT}/platform-tools:${PATH}"

          # Accept licenses and install required components for compileSdk 34
          "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" "platform-tools" "platforms;android-34" "build-tools;34.0.0" "cmdline-tools;latest" || true

          # Accept all licenses non-interactively
          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" --licenses || true

          echo "Installed Android SDK components under ${SDKROOT}"
      - name: Show gradle command
        run: echo "Running build with -> $GRADLE_CMD"

      - name: Build debug APK (assembleDebug)
        run: |
          set -euo pipefail
          # Ensure gradle wrapper is used if present
          if [ -f ./gradlew ]; then
            ./gradlew --version
          fi
          $GRADLE_CMD assembleDebug --no-daemon
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: twisted-apk
          path: app/build/outputs/apk/debug/app-debug.apk
