name: Build APK (robust)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Early debug: runner & repo info
        run: |
          echo "=== DEBUG START ==="
          echo "Date: $(date -u)"
          echo "Actor: $GITHUB_ACTOR"
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Ref: $GITHUB_REF"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Runner temp: $RUNNER_TEMP"
          echo "---- ls workspace ----"
          ls -la
          echo "=== DEBUG END ==="

      - name: Setup JDK 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure gradle wrapper is executable
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "gradlew: present"
          else
            echo "gradlew: MISSING (build may fail if repo relies on wrapper)"
          fi

      - name: Install Android command line tools and SDK components (platform 34)
        shell: bash
        run: |
          set -euo pipefail
          SDKROOT="${RUNNER_TEMP}/android-sdk"
          mkdir -p "${SDKROOT}"
          echo "Using SDKROOT=${SDKROOT}"
          if command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER_CMD="$(command -v sdkmanager)"
          else
            cd "${RUNNER_TEMP}"
            ZIP="commandlinetools-linux.zip"
            curl -fsSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o "$ZIP"
            rm -rf "${SDKROOT}/cmdline-tools"
            mkdir -p "${SDKROOT}/cmdline-tools/latest"
            unzip -q "$ZIP" -d "${SDKROOT}/cmdline-tools/latest"
            if [ -d "${SDKROOT}/cmdline-tools/latest/cmdline-tools" ]; then
              mv "${SDKROOT}/cmdline-tools/latest/cmdline-tools/"* "${SDKROOT}/cmdline-tools/latest/" || true
              rmdir "${SDKROOT}/cmdline-tools/latest/cmdline-tools" || true
            fi
            SDKMANAGER_CMD="${SDKROOT}/cmdline-tools/latest/bin/sdkmanager"
            chmod +x "${SDKMANAGER_CMD}"
          fi
          echo "sdkmanager => ${SDKMANAGER_CMD}"
          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" "platform-tools" "platforms;android-34" "build-tools;34.0.0" "cmdline-tools;latest" || true
          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" --licenses || true
          echo "ANDROID_SDK_ROOT=${SDKROOT}" >> "${GITHUB_ENV}"
          echo "${SDKROOT}/platform-tools" >> "${GITHUB_PATH}"
          echo "Android SDK components installed to ${SDKROOT}"

      - name: Print Java & Gradle versions (for logs)
        run: |
          java -version || true
          if [ -f ./gradlew ]; then ./gradlew --version || true; fi

      - name: Build debug APK (assembleDebug)
        run: |
          set -euo pipefail
          if [ -f ./gradlew ]; then
            echo "Using gradlew wrapper"
            ./gradlew assembleDebug --stacktrace --no-daemon
          else
            echo "gradlew missing, attempting system gradle (may fail)"
            gradle assembleDebug --stacktrace --no-daemon
          fi
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"

      - name: Show APK location or error if missing
        run: |
          APK="app/build/outputs/apk/debug/app-debug.apk"
          if [ -f "$APK" ]; then
            echo "APK built: $APK"
            ls -la "$APK"
          else
            echo "APK not found at $APK. Listing app/build:"
            ls -la app/build || true
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: twisted-apk
          path: app/build/outputs/apk/debug/app-debug.apk
