name: Build APK (fixed)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

# Explicitly declare minimal permissions so the runner can read the repository and write artifacts
permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show quick run info (debug)
        run: |
          echo "Date: $(date -u)"
          echo "Actor: $GITHUB_ACTOR"
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Ref: $GITHUB_REF"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Runner temp: $RUNNER_TEMP"
          echo "---- ls workspace ----"
          ls -la

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Ensure gradle wrapper is executable
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "gradlew present"
          else
            echo "gradlew NOT found"
          fi

      - name: Install Android command line tools + SDK (platform 34, build-tools 34.0.0)
        shell: bash
        run: |
          set -euo pipefail

          # Use runner temp directory to host SDK
          SDKROOT="${RUNNER_TEMP}/android-sdk"
          mkdir -p "${SDKROOT}"

          echo "Using SDKROOT=${SDKROOT}"

          # Prefer an sdkmanager already on PATH; otherwise download commandline tools
          if command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER_CMD="$(command -v sdkmanager)"
          else
            cd "${RUNNER_TEMP}"
            ZIP="commandlinetools-linux.zip"
            # stable/latest commandline tools zip from Google
            curl -fsSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o "$ZIP"
            rm -rf "${SDKROOT}/cmdline-tools"
            mkdir -p "${SDKROOT}/cmdline-tools/latest"
            unzip -q "$ZIP" -d "${SDKROOT}/cmdline-tools/latest"
            # flatten nested folder if necessary
            if [ -d "${SDKROOT}/cmdline-tools/latest/cmdline-tools" ]; then
              mv "${SDKROOT}/cmdline-tools/latest/cmdline-tools/"* "${SDKROOT}/cmdline-tools/latest/" || true
              rmdir "${SDKROOT}/cmdline-tools/latest/cmdline-tools" || true
            fi
            SDKMANAGER_CMD="${SDKROOT}/cmdline-tools/latest/bin/sdkmanager"
            chmod +x "${SDKMANAGER_CMD}"
          fi

          echo "sdkmanager => ${SDKMANAGER_CMD}"

          # Install platform-tools, platform 34 and build-tools 34.0.0 and accept licenses
          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" "platform-tools" "platforms;android-34" "build-tools;34.0.0" "cmdline-tools;latest" || true
          yes | "${SDKMANAGER_CMD}" --sdk_root="${SDKROOT}" --licenses || true

          # Persist ANDROID_SDK_ROOT for following steps, and add platform-tools to PATH
          echo "ANDROID_SDK_ROOT=${SDKROOT}" >> "${GITHUB_ENV}"
          echo "${SDKROOT}/platform-tools" >> "${GITHUB_PATH}"

          echo "Android SDK installed to ${SDKROOT}"

      - name: Print Java & Gradle versions
        run: |
          java -version || true
          if [ -f ./gradlew ]; then ./gradlew --version || true; fi

      - name: Build debug APK (assembleDebug)
        run: |
          set -euo pipefail
          # Use the wrapper if present; otherwise try gradle from PATH
          if [ -f ./gradlew ]; then
            ./gradlew assembleDebug --stacktrace --no-daemon
          else
            echo "gradlew missing; attempting 'gradle assembleDebug' (may fail)"
            gradle assembleDebug --stacktrace --no-daemon
          fi
        env:
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF8"

      - name: Upload APK artifact (if exists)
        uses: actions/upload-artifact@v4
        with:
          name: twisted-apk
          path: app/build/outputs/apk/debug/app-debug.apk
